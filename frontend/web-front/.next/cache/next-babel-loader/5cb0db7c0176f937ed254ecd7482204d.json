{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _react = require(\"react\");\n\nconst isServer = false;\n\nclass _default extends _react.Component {\n  constructor(props) {\n    super(props);\n    this._hasHeadManager = void 0;\n\n    this.emitChange = () => {\n      if (this._hasHeadManager) {\n        this.props.headManager.updateHead(this.props.reduceComponentsToState([...this.props.headManager.mountedInstances], this.props));\n      }\n    };\n\n    this._hasHeadManager = this.props.headManager && this.props.headManager.mountedInstances;\n\n    if (isServer && this._hasHeadManager) {\n      this.props.headManager.mountedInstances.add(this);\n      this.emitChange();\n    }\n  }\n\n  componentDidMount() {\n    if (this._hasHeadManager) {\n      this.props.headManager.mountedInstances.add(this);\n    }\n\n    this.emitChange();\n  }\n\n  componentDidUpdate() {\n    this.emitChange();\n  }\n\n  componentWillUnmount() {\n    if (this._hasHeadManager) {\n      this.props.headManager.mountedInstances.delete(this);\n    }\n\n    this.emitChange();\n  }\n\n  render() {\n    return null;\n  }\n\n}\n\nexports.default = _default;","map":{"version":3,"sources":["../../../next-server/lib/side-effect.tsx"],"names":["isServer","Component","_hasHeadManager","emitChange","constructor","componentDidMount","componentDidUpdate","componentWillUnmount","render"],"mappings":";;;;;AAAA,IAAA,MAAA,GAAA,OAAA,CAAA,OAAA,CAAA;;AAEA,MAAMA,QAAN,QAAA;;AAce,MAAA,QAAA,SAAcC,MAAAA,CAAAA,SAAd,CAAyC;AActDG,EAAAA,WAAW,CAAA,KAAA,EAAa;AACtB,UAAA,KAAA;AADsB,SAbhBF,eAagB,GAAA,KAAA,CAAA;;AAAA,SAXxBC,UAWwB,GAXX,MAAY;AACvB,UAAI,KAAJ,eAAA,EAA0B;AACxB,aAAA,KAAA,CAAA,WAAA,CAAA,UAAA,CACE,KAAA,KAAA,CAAA,uBAAA,CACE,CAAC,GAAG,KAAA,KAAA,CAAA,WAAA,CADN,gBACE,CADF,EAEE,KAHJ,KACE,CADF;AAOH;AAEuB,KAAA;;AAEtB,SAAA,eAAA,GACE,KAAA,KAAA,CAAA,WAAA,IAA0B,KAAA,KAAA,CAAA,WAAA,CAD5B,gBAAA;;AAGA,QAAIH,QAAQ,IAAI,KAAhB,eAAA,EAAsC;AACpC,WAAA,KAAA,CAAA,WAAA,CAAA,gBAAA,CAAA,GAAA,CAAA,IAAA;AACA,WAAA,UAAA;AAEH;AACDK;;AAAAA,EAAAA,iBAAiB,GAAG;AAClB,QAAI,KAAJ,eAAA,EAA0B;AACxB,WAAA,KAAA,CAAA,WAAA,CAAA,gBAAA,CAAA,GAAA,CAAA,IAAA;AAEF;;AAAA,SAAA,UAAA;AAEFC;;AAAAA,EAAAA,kBAAkB,GAAG;AACnB,SAAA,UAAA;AAEFC;;AAAAA,EAAAA,oBAAoB,GAAG;AACrB,QAAI,KAAJ,eAAA,EAA0B;AACxB,WAAA,KAAA,CAAA,WAAA,CAAA,gBAAA,CAAA,MAAA,CAAA,IAAA;AAEF;;AAAA,SAAA,UAAA;AAGFC;;AAAAA,EAAAA,MAAM,GAAG;AACP,WAAA,IAAA;AAzCoD;;AAAA","sourcesContent":["import React, { Component } from 'react'\n\nconst isServer = typeof window === 'undefined'\n\ntype State = JSX.Element[] | undefined\n\ntype SideEffectProps = {\n  reduceComponentsToState: <T>(\n    components: Array<React.ReactElement<any>>,\n    props: T\n  ) => State\n  handleStateChange?: (state: State) => void\n  headManager: any\n  inAmpMode?: boolean\n}\n\nexport default class extends Component<SideEffectProps> {\n  private _hasHeadManager: boolean\n\n  emitChange = (): void => {\n    if (this._hasHeadManager) {\n      this.props.headManager.updateHead(\n        this.props.reduceComponentsToState(\n          [...this.props.headManager.mountedInstances],\n          this.props\n        )\n      )\n    }\n  }\n\n  constructor(props: any) {\n    super(props)\n    this._hasHeadManager =\n      this.props.headManager && this.props.headManager.mountedInstances\n\n    if (isServer && this._hasHeadManager) {\n      this.props.headManager.mountedInstances.add(this)\n      this.emitChange()\n    }\n  }\n  componentDidMount() {\n    if (this._hasHeadManager) {\n      this.props.headManager.mountedInstances.add(this)\n    }\n    this.emitChange()\n  }\n  componentDidUpdate() {\n    this.emitChange()\n  }\n  componentWillUnmount() {\n    if (this._hasHeadManager) {\n      this.props.headManager.mountedInstances.delete(this)\n    }\n    this.emitChange()\n  }\n\n  render() {\n    return null\n  }\n}\n"]},"metadata":{},"sourceType":"script"}