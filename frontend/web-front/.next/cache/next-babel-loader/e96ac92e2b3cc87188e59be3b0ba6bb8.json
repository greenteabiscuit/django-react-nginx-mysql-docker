{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _router = require(\"../next-server/lib/router/router\");\n\nvar _getAssetPathFromRoute = _interopRequireDefault(require(\"../next-server/lib/router/utils/get-asset-path-from-route\"));\n\nvar _isDynamic = require(\"../next-server/lib/router/utils/is-dynamic\");\n\nvar _parseRelativeUrl = require(\"../next-server/lib/router/utils/parse-relative-url\");\n\nvar _routeLoader = _interopRequireWildcard(require(\"./route-loader\"));\n\nfunction normalizeRoute(route) {\n  if (route[0] !== '/') {\n    throw new Error(`Route name should start with a \"/\", got \"${route}\"`);\n  }\n\n  if (route === '/') return route;\n  return route.replace(/\\/$/, '');\n}\n\nclass PageLoader {\n  constructor(buildId, assetPrefix) {\n    this.buildId = void 0;\n    this.assetPrefix = void 0;\n    this.promisedSsgManifest = void 0;\n    this.promisedDevPagesManifest = void 0;\n    this.routeLoader = void 0;\n    this.routeLoader = (0, _routeLoader.default)(assetPrefix);\n    this.buildId = buildId;\n    this.assetPrefix = assetPrefix;\n    /** @type {Promise<Set<string>>} */\n\n    this.promisedSsgManifest = new Promise(resolve => {\n      if (window.__SSG_MANIFEST) {\n        resolve(window.__SSG_MANIFEST);\n      } else {\n        ;\n\n        window.__SSG_MANIFEST_CB = () => {\n          resolve(window.__SSG_MANIFEST);\n        };\n      }\n    });\n  }\n\n  getPageList() {\n    if (false) {\n      return (0, _routeLoader.getClientBuildManifest)().then(manifest => manifest.sortedPages);\n    } else {\n      if (window.__DEV_PAGES_MANIFEST) {\n        return window.__DEV_PAGES_MANIFEST.pages;\n      } else {\n        if (!this.promisedDevPagesManifest) {\n          this.promisedDevPagesManifest = fetch(`${this.assetPrefix}/_next/static/development/_devPagesManifest.json`).then(res => res.json()).then(manifest => {\n            ;\n            window.__DEV_PAGES_MANIFEST = manifest;\n            return manifest.pages;\n          }).catch(err => {\n            console.log(`Failed to fetch devPagesManifest`, err);\n          });\n        }\n\n        return this.promisedDevPagesManifest;\n      }\n    }\n  }\n  /**\n  * @param {string} href the route href (file-system path)\n  * @param {string} asPath the URL as shown in browser (virtual path); used for dynamic routes\n  */\n\n\n  getDataHref(href, asPath, ssg, locale) {\n    const {\n      pathname: hrefPathname,\n      query,\n      search\n    } = (0, _parseRelativeUrl.parseRelativeUrl)(href);\n    const {\n      pathname: asPathname\n    } = (0, _parseRelativeUrl.parseRelativeUrl)(asPath);\n    const route = normalizeRoute(hrefPathname);\n\n    const getHrefForSlug = path => {\n      const dataRoute = (0, _getAssetPathFromRoute.default)((0, _router.addLocale)(path, locale), '.json');\n      return (0, _router.addBasePath)(`/_next/data/${this.buildId}${dataRoute}${ssg ? '' : search}`);\n    };\n\n    const isDynamic = (0, _isDynamic.isDynamicRoute)(route);\n    const interpolatedRoute = isDynamic ? (0, _router.interpolateAs)(hrefPathname, asPathname, query).result : '';\n    return isDynamic ? interpolatedRoute && getHrefForSlug(interpolatedRoute) : getHrefForSlug(route);\n  }\n  /**\n  * @param {string} href the route href (file-system path)\n  */\n\n\n  _isSsg(href) {\n    const {\n      pathname: hrefPathname\n    } = (0, _parseRelativeUrl.parseRelativeUrl)(href);\n    const route = normalizeRoute(hrefPathname);\n    return this.promisedSsgManifest.then(s => s.has(route));\n  }\n\n  loadPage(route) {\n    return this.routeLoader.loadRoute(route).then(res => {\n      if ('component' in res) {\n        return {\n          page: res.component,\n          mod: res.exports,\n          styleSheets: res.styles.map(o => ({\n            href: o.href,\n            text: o.content\n          }))\n        };\n      }\n\n      throw res.error;\n    });\n  }\n\n  prefetch(route) {\n    return this.routeLoader.prefetch(route);\n  }\n\n}\n\nexports.default = PageLoader;","map":{"version":3,"sources":["../../client/page-loader.ts"],"names":["route","PageLoader","buildId","assetPrefix","promisedSsgManifest","promisedDevPagesManifest","routeLoader","constructor","resolve","window","getPageList","manifest","fetch","res","err","console","getDataHref","pathname","normalizeRoute","getHrefForSlug","path","dataRoute","ssg","search","isDynamic","interpolatedRoute","_isSsg","s","loadPage","page","mod","styleSheets","o","href","text","prefetch"],"mappings":"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","sourcesContent":["import { ComponentType } from 'react'\nimport type { ClientSsgManifest } from '../build'\nimport {\n  addBasePath,\n  addLocale,\n  interpolateAs,\n} from '../next-server/lib/router/router'\nimport getAssetPathFromRoute from '../next-server/lib/router/utils/get-asset-path-from-route'\nimport { isDynamicRoute } from '../next-server/lib/router/utils/is-dynamic'\nimport { parseRelativeUrl } from '../next-server/lib/router/utils/parse-relative-url'\nimport createRouteLoader, {\n  getClientBuildManifest,\n  RouteLoader,\n} from './route-loader'\n\nfunction normalizeRoute(route: string) {\n  if (route[0] !== '/') {\n    throw new Error(`Route name should start with a \"/\", got \"${route}\"`)\n  }\n\n  if (route === '/') return route\n  return route.replace(/\\/$/, '')\n}\n\nexport type StyleSheetTuple = { href: string; text: string }\nexport type GoodPageCache = {\n  page: ComponentType\n  mod: any\n  styleSheets: StyleSheetTuple[]\n}\n\nexport default class PageLoader {\n  private buildId: string\n  private assetPrefix: string\n\n  private promisedSsgManifest?: Promise<ClientSsgManifest>\n  private promisedDevPagesManifest?: Promise<any>\n  public routeLoader: RouteLoader\n\n  constructor(buildId: string, assetPrefix: string) {\n    this.routeLoader = createRouteLoader(assetPrefix)\n\n    this.buildId = buildId\n    this.assetPrefix = assetPrefix\n\n    /** @type {Promise<Set<string>>} */\n    this.promisedSsgManifest = new Promise((resolve) => {\n      if ((window as any).__SSG_MANIFEST) {\n        resolve((window as any).__SSG_MANIFEST)\n      } else {\n        ;(window as any).__SSG_MANIFEST_CB = () => {\n          resolve((window as any).__SSG_MANIFEST)\n        }\n      }\n    })\n  }\n\n  getPageList() {\n    if (process.env.NODE_ENV === 'production') {\n      return getClientBuildManifest().then((manifest) => manifest.sortedPages)\n    } else {\n      if ((window as any).__DEV_PAGES_MANIFEST) {\n        return (window as any).__DEV_PAGES_MANIFEST.pages\n      } else {\n        if (!this.promisedDevPagesManifest) {\n          this.promisedDevPagesManifest = fetch(\n            `${this.assetPrefix}/_next/static/development/_devPagesManifest.json`\n          )\n            .then((res) => res.json())\n            .then((manifest) => {\n              ;(window as any).__DEV_PAGES_MANIFEST = manifest\n              return manifest.pages\n            })\n            .catch((err) => {\n              console.log(`Failed to fetch devPagesManifest`, err)\n            })\n        }\n        return this.promisedDevPagesManifest\n      }\n    }\n  }\n\n  /**\n   * @param {string} href the route href (file-system path)\n   * @param {string} asPath the URL as shown in browser (virtual path); used for dynamic routes\n   */\n  getDataHref(\n    href: string,\n    asPath: string,\n    ssg: boolean,\n    locale?: string | false\n  ) {\n    const { pathname: hrefPathname, query, search } = parseRelativeUrl(href)\n    const { pathname: asPathname } = parseRelativeUrl(asPath)\n    const route = normalizeRoute(hrefPathname)\n\n    const getHrefForSlug = (path: string) => {\n      const dataRoute = getAssetPathFromRoute(addLocale(path, locale), '.json')\n      return addBasePath(\n        `/_next/data/${this.buildId}${dataRoute}${ssg ? '' : search}`\n      )\n    }\n\n    const isDynamic: boolean = isDynamicRoute(route)\n    const interpolatedRoute = isDynamic\n      ? interpolateAs(hrefPathname, asPathname, query).result\n      : ''\n\n    return isDynamic\n      ? interpolatedRoute && getHrefForSlug(interpolatedRoute)\n      : getHrefForSlug(route)\n  }\n\n  /**\n   * @param {string} href the route href (file-system path)\n   */\n  _isSsg(href: string): Promise<boolean> {\n    const { pathname: hrefPathname } = parseRelativeUrl(href)\n    const route = normalizeRoute(hrefPathname)\n    return this.promisedSsgManifest!.then((s: ClientSsgManifest) =>\n      s.has(route)\n    )\n  }\n\n  loadPage(route: string): Promise<GoodPageCache> {\n    return this.routeLoader.loadRoute(route).then((res) => {\n      if ('component' in res) {\n        return {\n          page: res.component,\n          mod: res.exports,\n          styleSheets: res.styles.map((o) => ({\n            href: o.href,\n            text: o.content,\n          })),\n        }\n      }\n      throw res.error\n    })\n  }\n\n  prefetch(route: string): Promise<void> {\n    return this.routeLoader.prefetch(route)\n  }\n}\n"]},"metadata":{},"sourceType":"script"}